<project name="Maven_Utilities" basedir="." xmlns:artifact="urn:maven-artifact-ant">
    <dirname property="imported.basedir" file="${ant.file.Maven_Utilities}"/>
    
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
            <pathelement location="${imported.basedir}/maven-ant-tasks-2.1.3.jar" />
        </classpath>
    </typedef>
            
    <property environment="env" />
    <property name="dest.dir" value="${basedir}/dist" />
    
    <!--
     | Define portal.home, maven.home and maven.settings variables if they are not set
     +-->
    <condition property="portal.home" value="${env.PORTAL_HOME}/uPortal">
        <and>
            <not>
                <isset property="portal.home"/>
            </not>
            <available file="${env.PORTAL_HOME}/uPortal"/>
        </and>
    </condition>
         
    <condition property="maven.home" value="${env.M2_HOME}">
        <and>
            <not>
                <isset property="maven.home"/>
            </not>
            <available file="${env.M2_HOME}"/>
        </and>
    </condition>
    <fail message="maven.home=${maven.home} does not exist.${line.separator}Either set maven.home in build.properties or set the M2_HOME environment variable.">
        <condition>
            <not>
                <available file="${maven.home}" />
            </not>
        </condition>
    </fail>
    
    <condition property="maven.settings" value="${user.home}/.ant/settings.xml">
        <and>
            <not>
                <isset property="maven.settings"/>
            </not>
            <available file="${user.home}/.ant/settings.xml"/>
        </and>
    </condition>
    <condition property="maven.settings" value="${user.home}/.m2/settings.xml">
        <and>
            <not>
                <isset property="maven.settings"/>
            </not>
            <available file="${user.home}/.m2/settings.xml"/>
        </and>
    </condition>
    <condition property="maven.settings" value="${maven.home}/conf/settings.xml">
        <and>
            <not>
                <isset property="maven.settings"/>
            </not>
            <available file="${maven.home}/conf/settings.xml"/>
        </and>
    </condition>
    <fail message="maven.settings=${maven.settings} does not exist.${line.separator}Either set maven.settings in build.properties or ensure one of the following files exist:${line.separator}    - ${user.home}/.ant/settings.xml${line.separator}    - ${user.home}/.m2/settings.xml${line.separator}    - ${maven.home}/conf/settings.xml">
        <condition>
            <not>
                <available file="${maven.settings}" />
            </not>
        </condition>
    </fail>
    
    <artifact:pom file="${basedir}/pom.xml" id="project.pom" settingsFile="${maven.settings}" />
    
    <target name="clean" description="Required by MyUW build process. Cleans all generated files.">
        <antcall target="mvn">
            <param name="pomDir" value="${basedir}" />
            <param name="goal" value="clean" />
        </antcall>
        <delete dir="${dest.dir}"/>
    </target>

    <target name="dist" description="Required by MyUW build process. Packages a fully build portlet WAR">
        <antcall target="mvn">
            <param name="pomDir" value="${basedir}" />
            <param name="goal" value="package" />
        </antcall>

        <mkdir dir="${dest.dir}"/>
        <copy file="${project.pom.build.directory}/${project.pom.build.finalName}.war" todir="${dest.dir}" />
    </target>
    
    <target name="deploy" depends="validate-env, dist" description="Deploys the packaged WAR to uPortal">
        <ant target="deployPortletApp" antfile="${portal.home}/build.xml" inheritall="false">
            <property name="portletApp" value="${dest.dir}/${project.pom.build.finalName}.war" />
        </ant>
    </target>
    
    <target name="validate-env">
        <fail message="portal.home does not exist. Set this to the location of uPortal in build.properties. (current location: ${portal.home})">
            <condition>
                <not>
                    <available file="${portal.home}" />
                </not>
            </condition>
        </fail>
    </target>

    <!--
     | Utility target for executing a maven with some number (up to 10) of goals. The
     | target should automaticly work on all OSs as long as 'mvn' is on the path.
     +-->
    <target name="mvn">
        <property name="goal" value="-Djasig.ignore" />
        <property name="goal1" value="-Djasig.ignore" />
        <property name="goal2" value="-Djasig.ignore" />
        <property name="goal3" value="-Djasig.ignore" />
        <property name="goal4" value="-Djasig.ignore" />
        <property name="goal5" value="-Djasig.ignore" />
        <property name="goal6" value="-Djasig.ignore" />
        <property name="goal7" value="-Djasig.ignore" />
        <property name="goal8" value="-Djasig.ignore" />
        <property name="goal9" value="-Djasig.ignore" />

        <condition property="test.skip" value="-Dmaven.test.skip=true">
            <isset property="maven.test.skip"/>
        </condition>
        <property name="test.skip" value="-Dmaven.test.skip=false" />
        
        <condition property="offline" value="-o">
            <isset property="maven.offline"/>
        </condition>
        <property name="offline" value="-Djasig.ignore" />
        
        <artifact:mvn pom="${pomDir}/pom.xml" failonerror="true" fork="true" mavenHome="${maven.home}">
            <arg value="${test.skip}" />
            <arg value="${offline}" />
            <arg value="${goal}" />
            <arg value="${goal1}" />
            <arg value="${goal2}" />
            <arg value="${goal3}" />
            <arg value="${goal4}" />
            <arg value="${goal5}" />
            <arg value="${goal6}" />
            <arg value="${goal7}" />
            <arg value="${goal8}" />
            <arg value="${goal9}" />
        </artifact:mvn>
    </target>
</project>